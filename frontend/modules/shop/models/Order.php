<?php

namespace frontend\modules\shop\models;

use Yii;
use yii\db\ActiveQuery;

/**
 * This is the model class for table "order".
 *
 * @property int $id
 * @property string|null $session_id
 * @property int|null $client_id
 *
 * @property Client $client
 * @property OrderProduct[] $orderProducts
 * @property Product[] $products
 * @property int $status [int(11)]
 * @property int $price [int(11)]
 */
class Order extends \yii\db\ActiveRecord
{
	const STATUS_INITIAL = 0;
	const STATUS_PRE_AUTHORIZED = 1;
	const STATUS_SUCCESS = 2;
	const STATUS_COMPLETE = 3;
	const STATUS_CANCEL = 4;

	/**
	 * {@inheritdoc}
	 */
	public static function tableName(): string
	{
		return 'order';
	}

	/**
	 * {@inheritdoc}
	 */
	public function rules(): array
	{
		return [
			[['client_id', 'session_id'], 'required'],
			[['client_id'], 'integer'],
			[['session_id'], 'string', 'max' => 255],
			[['client_id'], 'exist', 'skipOnError' => true, 'targetClass' => Client::className(), 'targetAttribute' => ['client_id' => 'id']],
			[['status'], 'default', 'value' => self::STATUS_INITIAL]
		];
	}

	/**
	 * {@inheritdoc}
	 */
	public function attributeLabels(): array
	{
		return [
			'id' => 'ID',
			'session_id' => 'Session ID',
			'client_id' => 'Client ID',
		];
	}

	public function afterSave($insert, $changedAttributes)
	{
		$transaction = Yii::$app->db->beginTransaction();
		foreach (Yii::$app->cart->getItems() as $item) {
			$product = Product::findOne($item->getProduct());
			$orderProduct = OrderProduct::find()->where(["order_id" => $this->id])->andWhere(["product_id" => $product->id])->one();
			if ($orderProduct) {
				$orderProduct->count = $item->getQuantity();
				$orderProduct->save();
			} else {
				$this->link('products', $product);
				$op = OrderProduct::find()->where(["order_id" => $this->id])->andWhere(["product_id" => $product->id])->one();
				$op->count = $item->getQuantity();
				$op->save();
			}
		}
		$transaction->commit();
		parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
	}

	public function load($data, $formName = null): bool
	{
		parent::load($data, $formName);
		if ($data["Order"]["client_id"]) {
			$client = Client::findOne($data["Order"]["client_id"]);
		} else {
			$client = Client::find()->where(["user_id" => Yii::$app->user->id])->one();
		}
		if ($client) {
			$this->client_id = $client->id;
			$this->session_id = Yii::$app->session->id;
		} else {
			$client = new Client();
			if ($client->load($data, $formName) && $client->save()) {
				$this->client_id = $client->id;
				$this->session_id = Yii::$app->session->id;
			}
		}
		if (isset($data["Order"]["status"])) {
			$this->status = $data["Order"]["status"];
		}
		return true;
	}

	/**
	 * Gets query for [[Client]].
	 *
	 * @return ActiveQuery
	 */
	public function getClient(): ActiveQuery
	{
		return $this->hasOne(Client::className(), ['id' => 'client_id']);
	}

	/**
	 * Gets query for [[OrderProducts]].
	 *
	 * @return ActiveQuery
	 */
	public function getOrderProducts(): ActiveQuery
	{
		return $this->hasMany(OrderProduct::className(), ['order_id' => 'id']);
	}

	/**
	 * Gets query for [[Products]].
	 *
	 * @return ActiveQuery
	 * @throws \yii\base\InvalidConfigException
	 */
	public function getProducts(): ActiveQuery
	{
		return $this->hasMany(Product::className(), ['id' => 'product_id'])->viaTable('order_product', ['order_id' => 'id']);
	}
}
